## Deployment

deploy:
  # Deploy standalone archives to GitHub releases.
  - provider: releases
    api_key:
      secure: QeXqTUALYnbyG3FYH38KFNWcpcmHd1GbQGzYXJNOPrjJho2UGcTyx4/HF+fvAYY3JZWqzj4W3/0O4fPJjAM+qVxf4Sym6kjHs7zoCwhedpTGun+rSVrZVxfQfx/ToS/IDzFkLqaFt3hiHdZUo7T7BNrP0nCX+iwDyi3957Mkg5GzuhJDVD1R5PC5RZqdwVLolsngvCauAsEhyrIO5IcALZSXASdvaw53QPbz8VGhtQnCf29fsClxQtMkc0iY/sXDwoyTRG/kFdZP59+zUgq5eupdsc2JlZekP1q6WoGsrSMDLibTdPzeRDsfyuSRvz/ptqf4DyIuSe3IASSn4ZaU8zCfAjNnOVKY6PBKkoADRlkUvQeoABmkTIcYUQcI5gI3iwweEmvCOCtCJW57DUhZK5+icV1raksWnLUJ7yuaoQxSeGjfjO7e8Lk80GsFkOoVTmZny6PNHoZlHgnK8oI2KSb41C5KpFflRJDRyGdnxTK1pf+VW5i/UTOrnoZv5Rwpafa+dB/flBN9zdIULy0Tz3ySC1rfzYzplfSxSVWlcQ/eqmeblj+kTyLd/H3dk1zGGDHCECi+IIxiB4Wgv1Hhyd3FS1iZOzzUgnvI/JLkFsaYj61mDoAYO15hmJ8l8pCz5SpiKokF+ieilCO4loRoRgWv3apUVtVfR6ucNEVWhQ8=
    file: "${files_for_github}"
    skip_cleanup: true
    on: &deploy_on
      repo: sass/dart-sass
      condition: $DEPLOYABLE = true
      tags: true

  # Deploy to npm and pub.
  - provider: script
    script: tool/deploy.sh
    on: *deploy_on

before_deploy:
- rm -rf build/
- pub run grinder package npm_package
- export files_for_github=$(ls build/dart-sass-*)

## Testing

# Set the language to Ruby so that we can run sass-spec tests.
language: ruby
env:
# Language specs, defined in sass/sass-spec.
#
# Until travis-ci/travis-ci#929 is fixed, the first specs task is responsible
# for building the artifacts to be deployed when the deployment conditions are
# met.
- TASK=specs   DART_VERSION=latest DEPLOYABLE=true
- TASK=specs   DART_VERSION=1.20.1
- TASK=specs   DART_VERSION=1.19.1

# Unit tests, defined in test/.
- TASK=tests   DART_VERSION=latest
- TASK=tests   DART_VERSION=1.20.1
- TASK=tests   DART_VERSION=1.19.1
- TASK=tests   DART_VERSION=latest NODE_VERSION=stable
- TASK=tests   DART_VERSION=latest NODE_VERSION=v6.9.1
- TASK=tests   DART_VERSION=latest NODE_VERSION=v4.6.2

# Miscellaneous checks.
- TASK=analyze DART_VERSION=latest
- TASK=format  DART_VERSION=latest

rvm:
- 2.3.1

# Only building master means that we don't run two builds for each pull request.
branches:
  only: [master]

cache:
  directories:
  - $HOME/.pub-cache

install:
- bold=$(tput bold)
- none=$(tput sgr0)

# Install the Dart SDK.
- curl -o dart.zip "https://storage.googleapis.com/dart-archive/channels/stable/release/$DART_VERSION/sdk/dartsdk-linux-x64-release.zip"
- unzip dart.zip
- export PATH="$PATH:`pwd`/dart-sdk/bin"
- pub get

# Install the Node SDK if we're running Node tests.
- if-node() { if [ ! -z "$NODE_VERSION" ]; then "$@"; fi }
- if-node . "$HOME/.nvm/nvm.sh"
- if-node nvm install "$NODE_VERSION"
- if-node nvm use "$NODE_VERSION"
- if-node nvm install

# Download sass-spec and install its dependencies if we're running specs.
- if-specs() { if [ "$TASK" = specs ]; then "$@"; fi }
- if-specs export sass_spec_ref=`tool/sass-spec-ref.sh`
- if-specs git init sass-spec
- if-specs git -C sass-spec fetch git://github.com/sass/sass-spec "$sass_spec_ref" --depth 1
- if-specs git -C sass-spec checkout FETCH_HEAD
- if-specs bundle install --gemfile=sass-spec/Gemfile --jobs=3 --retry=3

script:
- if [ "$TASK" = analyze ]; then
    echo "${bold}Analzing Dart code.$none";
    dartanalyzer --fatal-warnings lib/ test/ tool/;
  elif [ "$TASK" = format ]; then
    echo "${bold}Ensuring Dart code is formatted.$none";
    ./tool/assert-formatted.sh;
  elif [ "$TASK" = tests ]; then
    if [ -z "$NODE_VERSION" ]; then
      echo "${bold}Running Dart tests against $(dart --version &> /dev/stdout).$none";
      pub run test -x node;
    else
      echo "${bold}Running Node tests against Node $(node --version).$none";
      pub run test -t node;
    fi;
  else
    echo "${bold}Running sass-spec against $(dart --version &> /dev/stdout).$none";
    (cd sass-spec; bundle exec sass-spec.rb --dart ..);
  fi
